#!/bin/bash

echo "# Generated tup variables.  This file is generated by configure.sh.  It should not need to change after being generated." > tup.config

# Settings that should be command-line modifiable (or interactively modifiable)
# For now, uncomment to enable
echo CONFIG_DEBUG=true >> tup.config
#echo CONFIG_RELEASE=true >> tup.config

# Pass environment variables into tup
echo CONFIG_ENV_PLATFORM=$PLATFORM >> tup.config
if [ "$PLATFORM" == "windows" ]
then
	echo CONFIG_ENVTEMP_SHELL=C:/MinGW/msys/1.0/bin/bash.exe >> tup.config
	echo CONFIG_ENVTEMP_PROJECTROOT=$(pwd -W) >> tup.config # -W is a broken tup on MinGW hack, remove when tup is fixed.  Paths need to be C:\ relative.
else
	echo CONFIG_ENVTEMP_SHELL=$(which bash) >> tup.config
	echo CONFIG_ENVTEMP_PROJECTROOT=$(pwd) >> tup.config
fi

echo CONFIG_ENV_CFLAGS=$CFLAGS >> tup.config
echo CONFIG_ENV_LDFLAGS=$LDFLAGS >> tup.config

# These should be unnecessary once Tup is fixed for Windows shells
echo CONFIG_GEN_GTKCFLAGS=$(pkg-config --cflags gtk+-2.0) >> tup.config
echo CONFIG_GEN_GTKLDFLAGS=$(pkg-config --libs gtk+-2.0) >> tup.config

# Done
echo >> tup.config

echo Done configuring.  You may now run \"tup upd\".
